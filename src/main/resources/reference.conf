logging {
  level = DEBUG

  # Log dead letters
  dead-letters = on

  # enable DEBUG logging of all LoggingFSMs for events, transitions and timers (using akka.actor.LoggingFSM[StateType, Data])
  fsm = on

  # Logging of message invocations on certain actors (using akka.event.LoggingReceive)
  receive = on

  # Log unhandled actor messages
  unhandled = on

  # Log cluster informational messages
  cluster = on

  # Log all inbound and outbound messages to remote actors
  remote = off
}

akka {
  loglevel = ${logging.level}
  stdout-loglevel = ${logging.level}
  log-dead-letters = ${logging.dead-letters}

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    debug {
      fsm = ${logging.fsm}
      receive = ${logging.receive}
      unhandled = ${logging.unhandled}
    }

    serialization-bindings {
      "com.hakka.fsm.poc.transaction.PerformTransactionStart" = kryo,
      "com.hakka.fsm.poc.transaction.ChangeTransactionData" = kryo
    }

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }
  }

  remote {
    log-remote-lifecycle-events = off
    log-sent-messages = ${logging.remote}
    log-received-messages = ${logging.remote}
    log-remote-lifecycle-events = ${logging.remote}
    netty.tcp {
      hostname = ${clustering.ip}
      port = ${clustering.port}
      maximum-frame-size = 10000KiB
    }
  }

  cluster {
    log-info = ${logging.cluster}
    seed-nodes = [ 
      "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port} 
    ]
    auto-down-unreachable-after = 5s
  }

  # Where the persistence journal information is located (this is per ActorSystem)
//    persistence {
//      journal {
//        plugin = "akka.persistence.journal.leveldb-shared"
//        leveldb-shared.store {
//          # DO NOT USE 'native = off' IN PRODUCTION !!!
//          native = off
//          dir = "target/journal"
//        }
//      }
//      snapshot-store {
//        plugin = "akka.persistence.snapshot-store.local"
//        local.dir = "target/journal"
//      }
//    }

  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }
}

timeouts {

  future = 60 s
  idle = 300 s
  waiting = 300 s
  defaultReceive = 300 s
}

clustering {
  ip = 127.0.0.1
  port = 2551
  seed-ip = 127.0.0.1
  seed-port = 2551
  cluster.name = PersistentFsmPoc
}

cassandra-journal {

  # FQCN of the cassandra journal plugin
  class = "akka.persistence.cassandra.journal.CassandraJournal"

  # Comma-separated list of contact points in the cluster
  contact-points = ["127.0.0.1"]

  # Port of contact points in the cluster
  port = 9042

  # Name of the keyspace to be created/used by the journal
  keyspace = "poc_persistent_fsm"

  # Parameter indicating whether the journal keyspace should be auto created
  keyspace-autocreate = false

  # Name of the table to be created/used by the journal
  table = "messages"

  # Write consistency level
  write-consistency = "ONE"

  # Read consistency level
  read-consistency = "ONE"

  cassandra-2x-compat=on
}

cassandra-snapshot-store {

  # FQCN of the cassandra snapshot store plugin
  class = "akka.persistence.cassandra.snapshot.CassandraSnapshotStore"

  # Comma-separated list of contact points in the cluster
  contact-points = ["127.0.0.1"]

  # Port of contact points in the cluster
  port = 9042

  # Name of the keyspace to be created/used by the journal
  keyspace = "poc_persistent_fsm"

  # Parameter indicating whether the journal keyspace should be auto created
  keyspace-autocreate = false

  # Name of the table to be created/used by the journal
  table = "snapshots"

  # Write consistency level
  write-consistency = "ONE"

  # Read consistency level
  read-consistency = "ONE"

  cassandra-2x-compat=on
}

spray {
  can.server {
    idle-timeout = 31 s
    request-timeout = 30 s
    connection-timeout = 30 s
    pipelining-limit = 32
  }

  can.client {
    idle-timeout = 30 s
    request-timeout = 30 s
    connection-timeout = 30 s
  }

  io.confirm-sends = on
}

server {
  bind = "127.0.0.1"
  port = 8080
}